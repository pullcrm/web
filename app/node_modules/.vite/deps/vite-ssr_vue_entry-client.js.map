{
  "version": 3,
  "sources": ["../../vite-ssr/utils/deserialize-state.js", "../../vite-ssr/core/entry-client.js", "../../vite-ssr/vue/entry-client.js", "dep:vite-ssr_vue_entry-client"],
  "sourcesContent": ["export function deserializeState(state) {\n    try {\n        return JSON.parse(state || '{}');\n    }\n    catch (error) {\n        console.error('[SSR] On state deserialization -', error, state);\n        return {};\n    }\n}\n", "import { deserializeState } from '../utils/deserialize-state';\nimport { useClientRedirect } from '../utils/response';\nexport const viteSSR = async function viteSSR(options, hook) {\n    if (!hook && typeof options === 'function') {\n        hook = options;\n        options = {};\n    }\n    const { url = new URL(window.location.href), transformState = deserializeState, spaRedirect, } = (options || {});\n    // Deserialize the state included in the DOM\n    const initialState = await transformState(\n    // @ts-ignore\n    window.__INITIAL_STATE__, deserializeState);\n    // Browser redirect utilities\n    const { redirect, writeResponse } = useClientRedirect(spaRedirect);\n    const context = {\n        url,\n        isClient: true,\n        initialState: initialState || {},\n        writeResponse,\n        redirect,\n    };\n    // Main hook / component\n    hook && (await hook(context));\n    return context;\n};\nexport default viteSSR;\n", "import { createSSRApp } from 'vue';\nimport { createRouter, createWebHistory } from 'vue-router';\nimport createClientContext from '../core/entry-client.js';\nimport { getFullPath, withoutSuffix } from '../utils/route';\nimport { addPagePropsGetterToRoutes } from './utils';\nimport { provideContext } from './components.js';\nexport { ClientOnly, useContext } from './components.js';\nexport const viteSSR = async function viteSSR(App, { routes, base, routerOptions = {}, pageProps = { passToPage: true }, debug = {}, ...options }, hook) {\n    if (pageProps && pageProps.passToPage) {\n        addPagePropsGetterToRoutes(routes);\n    }\n    const app = createSSRApp(App);\n    const url = new URL(window.location.href);\n    const routeBase = base && withoutSuffix(base({ url }), '/');\n    const router = createRouter({\n        ...routerOptions,\n        history: createWebHistory(routeBase),\n        routes: routes,\n    });\n    const context = await createClientContext({\n        ...options,\n        url,\n        spaRedirect: (location) => router.push(location),\n    });\n    provideContext(app, context);\n    let entryRoutePath;\n    let isFirstRoute = true;\n    router.beforeEach((to) => {\n        if (isFirstRoute || (entryRoutePath && entryRoutePath === to.path)) {\n            // The first route is rendered in the server and its state is provided globally.\n            isFirstRoute = false;\n            entryRoutePath = to.path;\n            to.meta.state = context.initialState;\n        }\n    });\n    if (hook) {\n        await hook({\n            app,\n            router,\n            initialRoute: router.resolve(getFullPath(url, routeBase)),\n            ...context,\n        });\n    }\n    app.use(router);\n    if (debug.mount !== false) {\n        // this will hydrate the app\n        await router.isReady();\n        // @ts-ignore\n        app.mount(`#${__CONTAINER_ID__}`, true);\n        // it is possible to debug differences of SSR / Hydrated app state\n        // by adding a timeout between rendering the SSR version and hydrating it later\n        // window.setTimeout(() => {\n        //   console.log('The app has now hydrated');\n        //   router.isReady().then(() => {\n        //     app.mount('#app', true);\n        //   });\n        // }, 5000);\n    }\n};\nexport default viteSSR;\n", "import d from \"./node_modules/vite-ssr/vue/entry-client.js\";export default d;\nexport * from \"./node_modules/vite-ssr/vue/entry-client.js\""],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAO,0BAA0B,OAAO;AACpC,MAAI;AACA,WAAO,KAAK,MAAM,SAAS,IAAI;AAAA,EACnC,SACO,OAAP;AACI,YAAQ,MAAM,oCAAoC,OAAO,KAAK;AAC9D,WAAO,CAAC;AAAA,EACZ;AACJ;;;ACNO,IAAM,UAAU,wBAAuB,SAAS,MAAM;AACzD,MAAI,CAAC,QAAQ,OAAO,YAAY,YAAY;AACxC,WAAO;AACP,cAAU,CAAC;AAAA,EACf;AACA,QAAM,EAAE,MAAM,IAAI,IAAI,OAAO,SAAS,IAAI,GAAG,iBAAiB,kBAAkB,gBAAkB,WAAW,CAAC;AAE9G,QAAM,eAAe,MAAM,eAE3B,OAAO,mBAAmB,gBAAgB;AAE1C,QAAM,EAAE,UAAU,kBAAkB,kBAAkB,WAAW;AACjE,QAAM,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,IACV,cAAc,gBAAgB,CAAC;AAAA,IAC/B;AAAA,IACA;AAAA,EACJ;AAEA,UAAS,MAAM,KAAK,OAAO;AAC3B,SAAO;AACX;AACA,IAAO,uBAAQ;;;AClBR,IAAM,WAAU,wBAAuB,KAAK,IAAgG,MAAM;AAAtG,eAAE,UAAQ,MAAM,gBAAgB,CAAC,GAAG,YAAY,EAAE,YAAY,KAAK,GAAG,QAAQ,CAAC,MAA/E,IAAqF,oBAArF,IAAqF,CAAnF,UAAQ,QAAM,iBAAoB,aAAkC;AACrH,MAAI,aAAa,UAAU,YAAY;AACnC,+BAA2B,MAAM;AAAA,EACrC;AACA,QAAM,MAAM,aAAa,GAAG;AAC5B,QAAM,MAAM,IAAI,IAAI,OAAO,SAAS,IAAI;AACxC,QAAM,YAAY,QAAQ,cAAc,KAAK,EAAE,IAAI,CAAC,GAAG,GAAG;AAC1D,QAAM,SAAS,aAAa,iCACrB,gBADqB;AAAA,IAExB,SAAS,iBAAiB,SAAS;AAAA,IACnC;AAAA,EACJ,EAAC;AACD,QAAM,UAAU,MAAM,qBAAoB,iCACnC,UADmC;AAAA,IAEtC;AAAA,IACA,aAAa,CAAC,aAAa,OAAO,KAAK,QAAQ;AAAA,EACnD,EAAC;AACD,iBAAe,KAAK,OAAO;AAC3B,MAAI;AACJ,MAAI,eAAe;AACnB,SAAO,WAAW,CAAC,OAAO;AACtB,QAAI,gBAAiB,kBAAkB,mBAAmB,GAAG,MAAO;AAEhE,qBAAe;AACf,uBAAiB,GAAG;AACpB,SAAG,KAAK,QAAQ,QAAQ;AAAA,IAC5B;AAAA,EACJ,CAAC;AACD,MAAI,MAAM;AACN,UAAM,KAAK;AAAA,MACP;AAAA,MACA;AAAA,MACA,cAAc,OAAO,QAAQ,YAAY,KAAK,SAAS,CAAC;AAAA,OACrD,QACN;AAAA,EACL;AACA,MAAI,IAAI,MAAM;AACd,MAAI,MAAM,UAAU,OAAO;AAEvB,UAAM,OAAO,QAAQ;AAErB,QAAI,MAAM,IAAI,SAAoB,IAAI;AAAA,EAS1C;AACJ;AACA,IAAO,wBAAQ;;;AC3D6C,IAAO,oCAAQ;",
  "names": []
}
