import {
  defineComponent,
  inject,
  onMounted,
  ref
} from "./chunk-KT3I7XAB.js";
import {
  __spreadValues
} from "./chunk-UNANNA3Z.js";

// node_modules/vite-ssr/vue/components.js
var ClientOnly = defineComponent({
  name: "ClientOnly",
  setup(_, { slots }) {
    const show = ref(false);
    onMounted(() => {
      show.value = true;
    });
    return () => show.value && slots.default ? slots.default() : null;
  }
});
var CONTEXT_SYMBOL = Symbol();
function provideContext(app, context) {
  app.provide(CONTEXT_SYMBOL, context);
}
function useContext() {
  return inject(CONTEXT_SYMBOL);
}

// node_modules/vite-ssr/utils/route.js
var S = "/";
function withPrefix(string, prefix) {
  return string.startsWith(prefix) ? string : prefix + string;
}
function withoutPrefix(string, prefix) {
  return string.startsWith(prefix) ? string.slice(prefix.length) : string;
}
function withSuffix(string, suffix) {
  return string.endsWith(suffix) ? string : string + suffix;
}
function withoutSuffix(string, suffix) {
  return string.endsWith(suffix) ? string.slice(0, -1 * suffix.length) : string;
}
function createUrl(urlLike) {
  if (typeof urlLike === "string" && !(urlLike || "").includes("://")) {
    urlLike = "http://e.g" + withPrefix(urlLike, S);
  }
  return new URL(urlLike.toString());
}
function getFullPath(url, routeBase) {
  url = createUrl(url);
  url.pathname = withSuffix(url.pathname, S);
  let fullPath = withoutPrefix(url.href, url.origin);
  if (routeBase) {
    routeBase = withSuffix(withPrefix(routeBase, S), S);
    if (fullPath.indexOf(routeBase) === 0) {
      fullPath = withPrefix(fullPath.replace(routeBase, ""), S);
    }
  }
  return fullPath;
}

// node_modules/vite-ssr/vue/utils.js
function addPagePropsGetterToRoutes(routes) {
  routes.forEach((staticRoute) => {
    const originalProps = staticRoute.props;
    staticRoute.props = (route) => {
      const resolvedProps = originalProps === true ? route.params : typeof originalProps === "function" ? originalProps(route) : originalProps;
      return __spreadValues(__spreadValues(__spreadValues({}, (route.meta.hmr || {}).value), route.meta.state || {}), resolvedProps || {});
    };
  });
}

// node_modules/vite-ssr/utils/defer.js
function defer() {
  const deferred = { status: "pending" };
  deferred.promise = new Promise((resolve, reject) => {
    deferred.resolve = (value) => {
      deferred.status = "resolved";
      return resolve(value);
    };
    deferred.reject = (error) => {
      deferred.status = "rejected";
      return reject(error);
    };
  });
  return deferred;
}

// node_modules/vite-ssr/utils/response.js
var isRedirect = ({ status = 0 }) => status >= 300 && status < 400;
function useSsrResponse() {
  const deferred = defer();
  let response = {};
  const writeResponse = (params) => {
    Object.assign(response, params);
    if (isRedirect(params)) {
      deferred.resolve(response);
    }
  };
  return {
    deferred,
    response,
    writeResponse,
    isRedirect: () => isRedirect(response),
    redirect: (location, status = 302) => writeResponse({ headers: { location }, status })
  };
}
var externalRedirect = (location) => {
  window.location.href = location;
};
function useClientRedirect(spaRedirect = externalRedirect) {
  return {
    writeResponse: () => console.warn("[SSR] Do not call writeResponse in browser"),
    redirect: (location, status) => {
      return location.startsWith("/") ? spaRedirect(location) : externalRedirect(location);
    }
  };
}

export {
  useSsrResponse,
  useClientRedirect,
  withoutSuffix,
  createUrl,
  getFullPath,
  addPagePropsGetterToRoutes,
  ClientOnly,
  provideContext,
  useContext
};
//# sourceMappingURL=chunk-JIKA4672.js.map
