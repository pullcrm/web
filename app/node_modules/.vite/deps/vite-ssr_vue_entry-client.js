import {
  ClientOnly,
  addPagePropsGetterToRoutes,
  getFullPath,
  provideContext,
  useClientRedirect,
  useContext,
  withoutSuffix
} from "./chunk-JIKA4672.js";
import {
  createRouter,
  createWebHistory
} from "./chunk-Y7PJKTNA.js";
import {
  createSSRApp
} from "./chunk-KT3I7XAB.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./chunk-UNANNA3Z.js";

// node_modules/vite-ssr/utils/deserialize-state.js
function deserializeState(state) {
  try {
    return JSON.parse(state || "{}");
  } catch (error) {
    console.error("[SSR] On state deserialization -", error, state);
    return {};
  }
}

// node_modules/vite-ssr/core/entry-client.js
var viteSSR = async function viteSSR2(options, hook) {
  if (!hook && typeof options === "function") {
    hook = options;
    options = {};
  }
  const { url = new URL(window.location.href), transformState = deserializeState, spaRedirect } = options || {};
  const initialState = await transformState(window.__INITIAL_STATE__, deserializeState);
  const { redirect, writeResponse } = useClientRedirect(spaRedirect);
  const context = {
    url,
    isClient: true,
    initialState: initialState || {},
    writeResponse,
    redirect
  };
  hook && await hook(context);
  return context;
};
var entry_client_default = viteSSR;

// node_modules/vite-ssr/vue/entry-client.js
var viteSSR3 = async function viteSSR4(App, _a, hook) {
  var _b = _a, { routes, base, routerOptions = {}, pageProps = { passToPage: true }, debug = {} } = _b, options = __objRest(_b, ["routes", "base", "routerOptions", "pageProps", "debug"]);
  if (pageProps && pageProps.passToPage) {
    addPagePropsGetterToRoutes(routes);
  }
  const app = createSSRApp(App);
  const url = new URL(window.location.href);
  const routeBase = base && withoutSuffix(base({ url }), "/");
  const router = createRouter(__spreadProps(__spreadValues({}, routerOptions), {
    history: createWebHistory(routeBase),
    routes
  }));
  const context = await entry_client_default(__spreadProps(__spreadValues({}, options), {
    url,
    spaRedirect: (location) => router.push(location)
  }));
  provideContext(app, context);
  let entryRoutePath;
  let isFirstRoute = true;
  router.beforeEach((to) => {
    if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {
      isFirstRoute = false;
      entryRoutePath = to.path;
      to.meta.state = context.initialState;
    }
  });
  if (hook) {
    await hook(__spreadValues({
      app,
      router,
      initialRoute: router.resolve(getFullPath(url, routeBase))
    }, context));
  }
  app.use(router);
  if (debug.mount !== false) {
    await router.isReady();
    app.mount(`#${"app"}`, true);
  }
};
var entry_client_default2 = viteSSR3;

// dep:vite-ssr_vue_entry-client
var vite_ssr_vue_entry_client_default = entry_client_default2;
export {
  ClientOnly,
  vite_ssr_vue_entry_client_default as default,
  useContext,
  viteSSR3 as viteSSR
};
//# sourceMappingURL=vite-ssr_vue_entry-client.js.map
